name: üöÄ Deploy to Streamlit Cloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PYTHON_VERSION: '3.11'

jobs:
  # üîç Pre-deployment validation
  validate:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üß™ Quick Health Check
      run: |
        echo "üß™ Running quick health checks..."
        
        # Test data fetcher
        python -c "
        from src.data_fetcher import get_life_expectancy_data
        data = get_life_expectancy_data()
        assert len(data) > 0, 'No data available'
        print(f'‚úÖ Data validation passed: {len(data)} records')
        "
        
        # Test Streamlit app import
        python -c "
        import streamlit as st
        import app
        print('‚úÖ Streamlit app imports successfully')
        "
        
    - name: üìä Generate Fresh Data
      run: |
        echo "üìä Ensuring fresh data for deployment..."
        cd src
        python data_fetcher.py
        
    - name: üèóÔ∏è Test Application Build
      run: |
        echo "üèóÔ∏è Testing application startup..."
        timeout 30s streamlit run app.py --server.headless=true --server.port=8502 &
        sleep 15
        
        # Check if app is responding
        curl -f http://localhost:8502/_stcore/health || {
          echo "‚ùå Application failed to start"
          exit 1
        }
        
        echo "‚úÖ Application startup test passed"

  # üì¶ Prepare deployment package
  prepare:
    name: üì¶ Prepare Deployment
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üßπ Clean for Deployment
      run: |
        echo "üßπ Cleaning repository for deployment..."
        
        # Remove development files
        rm -rf tests/
        rm -rf .pytest_cache/
        rm -rf htmlcov/
        rm -f .coverage
        rm -f coverage.xml
        rm -f bandit-report.json
        rm -f safety-report.json
        
        # Remove unnecessary config files for deployment
        rm -f .flake8
        rm -f pyproject.toml
        
        echo "‚úÖ Repository cleaned for deployment"
        
    - name: üìù Create Deployment Info
      run: |
        echo "üìù Creating deployment information..."
        
        cat > deployment_info.json << EOF
        {
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "git_commit": "${{ github.sha }}",
          "git_branch": "${{ github.ref_name }}",
          "environment": "${{ github.event.inputs.environment || 'production' }}",
          "version": "1.0.0"
        }
        EOF
        
        echo "‚úÖ Deployment info created"
        
    - name: üì§ Upload Deployment Package
      uses: actions/upload-artifact@v3
      with:
        name: streamlit-deployment-package
        path: |
          .
          !.git/
        retention-days: 7

  # üåê Deploy to Streamlit Cloud
  deploy:
    name: üåê Deploy to Streamlit Cloud
    runs-on: ubuntu-latest
    needs: prepare
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: üì• Download Deployment Package
      uses: actions/download-artifact@v3
      with:
        name: streamlit-deployment-package
        path: .
        
    - name: üöÄ Deploy to Streamlit Cloud
      run: |
        echo "üöÄ Deploying to Streamlit Cloud..."
        echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "Commit: ${{ github.sha }}"
        
        # Note: Streamlit Cloud deploys automatically from GitHub
        # This step documents the deployment process
        
        if [ "${{ github.event.inputs.environment || 'production' }}" = "production" ]; then
          echo "üìç Production URL: https://life-expectancy-dashboard.streamlit.app"
          DEPLOY_URL="https://life-expectancy-dashboard.streamlit.app"
        else
          echo "üìç Staging URL: https://staging-life-expectancy-dashboard.streamlit.app"
          DEPLOY_URL="https://staging-life-expectancy-dashboard.streamlit.app"
        fi
        
        echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
        
        echo "‚úÖ Deployment configuration updated"

  # üîç Post-deployment validation
  validate-deployment:
    name: üîç Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: ‚è∞ Wait for Deployment
      run: |
        echo "‚è∞ Waiting for deployment to be ready..."
        sleep 60  # Give Streamlit Cloud time to deploy
        
    - name: üîç Health Check
      run: |
        echo "üîç Running post-deployment health checks..."
        
        # Note: Replace with actual deployment URL
        DEPLOY_URL="${{ env.DEPLOY_URL || 'https://life-expectancy-dashboard.streamlit.app' }}"
        
        echo "Checking: $DEPLOY_URL"
        
        # Basic connectivity check
        for i in {1..5}; do
          if curl -f -s --max-time 30 "$DEPLOY_URL" > /dev/null; then
            echo "‚úÖ Deployment is responding (attempt $i)"
            break
          else
            echo "‚è≥ Waiting for deployment... (attempt $i/5)"
            sleep 30
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Deployment health check failed after 5 attempts"
            exit 1
          fi
        done
        
        echo "‚úÖ Deployment validation completed successfully"

  # üì¢ Notify deployment status
  notify:
    name: üì¢ Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, prepare, deploy, validate-deployment]
    if: always()
    
    steps:
    - name: üì¢ Deployment Success Notification
      if: ${{ needs.validate-deployment.result == 'success' }}
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üåç Dashboard URL: ${{ env.DEPLOY_URL || 'https://life-expectancy-dashboard.streamlit.app' }}"
        echo "üîß Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üìÖ Time: $(date -u)"
        
        # Here you could add integrations with:
        # - Slack notifications
        # - Discord webhooks  
        # - Email notifications
        # - Teams notifications
        
    - name: ‚ùå Deployment Failure Notification
      if: ${{ needs.validate-deployment.result == 'failure' || needs.deploy.result == 'failure' }}
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîß Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üìÖ Time: $(date -u)"
        echo "üîç Check the logs for details"
        
        # Send failure notifications
        exit 1

  # üìä Performance monitoring
  monitor:
    name: üìä Performance Monitoring
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: ${{ needs.validate-deployment.result == 'success' }}
    
    steps:
    - name: üìä Basic Performance Check
      run: |
        echo "üìä Running basic performance monitoring..."
        
        DEPLOY_URL="${{ env.DEPLOY_URL || 'https://life-expectancy-dashboard.streamlit.app' }}"
        
        # Measure response time
        start_time=$(date +%s.%N)
        curl -f -s --max-time 30 "$DEPLOY_URL" > /dev/null
        end_time=$(date +%s.%N)
        
        response_time=$(echo "$end_time - $start_time" | bc -l)
        response_time_ms=$(echo "$response_time * 1000" | bc -l)
        
        echo "‚è±Ô∏è Response time: ${response_time_ms} ms"
        
        # Performance thresholds
        if (( $(echo "$response_time > 10" | bc -l) )); then
          echo "‚ö†Ô∏è Warning: Response time is high (${response_time_ms} ms)"
        else
          echo "‚úÖ Response time is acceptable"
        fi
        
        echo "‚úÖ Performance monitoring completed"
